# Generated by Django 3.1.6 on 2021-02-17 08:42

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Awardingbody',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'awardingbody',
            },
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.CharField(max_length=10, primary_key=True, serialize=False)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'cart',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('category_id', models.IntegerField(primary_key=True, serialize=False)),
                ('category', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'category',
            },
        ),
        migrations.CreateModel(
            name='CertificateType',
            fields=[
                ('type_id', models.IntegerField(primary_key=True, serialize=False)),
                ('price', models.FloatField()),
                ('type', models.CharField(blank=True, max_length=45, null=True)),
            ],
            options={
                'db_table': 'certificate_type',
            },
        ),
        migrations.CreateModel(
            name='Certification',
            fields=[
                ('certification_id', models.IntegerField(primary_key=True, serialize=False)),
                ('certificate_name', models.CharField(blank=True, max_length=50, null=True)),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kurstrack.certificatetype')),
            ],
            options={
                'db_table': 'certification',
            },
        ),
        migrations.CreateModel(
            name='Coursedesign',
            fields=[
                ('design_id', models.IntegerField(primary_key=True, serialize=False)),
                ('design_type', models.CharField(blank=True, max_length=45, null=True)),
            ],
            options={
                'db_table': 'coursedesign',
            },
        ),
        migrations.CreateModel(
            name='Grouponcoursesinfo',
            fields=[
                ('course_id', models.IntegerField(primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, max_length=500, null=True)),
                ('link', models.CharField(blank=True, max_length=500, null=True)),
                ('subtitle', models.CharField(blank=True, max_length=1000, null=True)),
                ('offer_price', models.FloatField(blank=True, null=True)),
                ('original_price', models.FloatField(blank=True, null=True)),
                ('unit_sold', models.IntegerField(blank=True, null=True)),
                ('saving_percent', models.FloatField(blank=True, null=True)),
                ('category', models.CharField(blank=True, max_length=150, null=True)),
            ],
            options={
                'db_table': 'grouponcoursesinfo',
            },
        ),
        migrations.CreateModel(
            name='Instructorinfo',
            fields=[
                ('instructor_id', models.IntegerField(db_column='Instructor_id', primary_key=True, serialize=False)),
                ('first_name', models.CharField(blank=True, max_length=45, null=True)),
                ('last_name', models.CharField(blank=True, max_length=45, null=True)),
                ('designation', models.CharField(blank=True, max_length=45, null=True)),
                ('address', models.CharField(blank=True, max_length=200, null=True)),
                ('phone', models.CharField(blank=True, max_length=45, null=True)),
                ('website', models.CharField(blank=True, max_length=45, null=True)),
                ('social_media', models.CharField(blank=True, max_length=45, null=True)),
                ('email', models.CharField(blank=True, max_length=45, null=True)),
                ('type', models.CharField(blank=True, max_length=45, null=True)),
            ],
            options={
                'db_table': 'instructorinfo',
            },
        ),
        migrations.CreateModel(
            name='Level',
            fields=[
                ('level_id', models.IntegerField(primary_key=True, serialize=False)),
                ('level_name', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'level',
            },
        ),
        migrations.CreateModel(
            name='Module',
            fields=[
                ('module_id', models.IntegerField(primary_key=True, serialize=False)),
                ('module_name', models.CharField(blank=True, max_length=5000, null=True)),
                ('module_id_from', models.IntegerField()),
            ],
            options={
                'db_table': 'module',
            },
        ),
        migrations.CreateModel(
            name='Quizes',
            fields=[
                ('question_id', models.IntegerField(primary_key=True, serialize=False)),
                ('question', models.TextField(blank=True, null=True)),
                ('answer', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'quizes',
            },
        ),
        migrations.CreateModel(
            name='Reedcoursesinfo',
            fields=[
                ('r_course_id', models.IntegerField(primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, max_length=500, null=True)),
                ('link', models.CharField(blank=True, max_length=500, null=True)),
                ('subtitle', models.CharField(blank=True, max_length=1000, null=True)),
                ('offer_price', models.FloatField(blank=True, null=True)),
                ('original_price', models.FloatField(blank=True, null=True)),
                ('savings_percent', models.FloatField(blank=True, null=True)),
                ('broad_category1', models.CharField(blank=True, max_length=100, null=True)),
                ('broad_category2', models.CharField(blank=True, max_length=100, null=True)),
                ('sub_category1', models.CharField(blank=True, max_length=100, null=True)),
                ('sub_category2', models.CharField(blank=True, max_length=100, null=True)),
                ('have_cpd', models.IntegerField(blank=True, null=True)),
                ('cpd_point', models.IntegerField(blank=True, null=True)),
                ('cpd_provider', models.CharField(blank=True, max_length=1000, null=True)),
                ('qual_name', models.CharField(blank=True, max_length=1000, null=True)),
                ('is_regulated', models.IntegerField(blank=True, null=True)),
                ('sold_enq', models.IntegerField(blank=True, null=True)),
                ('single_bundle', models.IntegerField(blank=True, null=True)),
                ('awardingbody', models.ForeignKey(db_column='AwardingBody_id', on_delete=django.db.models.deletion.CASCADE, to='kurstrack.awardingbody')),
            ],
            options={
                'db_table': 'reedcoursesinfo',
            },
        ),
        migrations.CreateModel(
            name='Registerinfo',
            fields=[
                ('register_id', models.IntegerField(primary_key=True, serialize=False)),
                ('first_name', models.CharField(blank=True, max_length=45, null=True)),
                ('last_name', models.CharField(blank=True, max_length=45, null=True)),
                ('designation', models.CharField(blank=True, max_length=45, null=True)),
                ('address', models.CharField(blank=True, max_length=200, null=True)),
                ('phone', models.CharField(blank=True, max_length=45, null=True)),
                ('website', models.CharField(blank=True, max_length=45, null=True)),
                ('social_media', models.CharField(blank=True, max_length=45, null=True)),
                ('email', models.CharField(blank=True, max_length=45, null=True)),
                ('type', models.CharField(blank=True, max_length=45, null=True)),
            ],
            options={
                'db_table': 'registerinfo',
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('student_id', models.IntegerField(primary_key=True, serialize=False)),
                ('first_name', models.CharField(blank=True, max_length=45, null=True)),
                ('last_name', models.CharField(blank=True, max_length=45, null=True)),
                ('profession', models.CharField(blank=True, max_length=45, null=True)),
                ('address', models.CharField(blank=True, max_length=45, null=True)),
                ('phone', models.CharField(max_length=45, null=True, unique=True)),
                ('website', models.CharField(blank=True, max_length=45, null=True)),
                ('social_media', models.CharField(blank=True, max_length=45, null=True)),
                ('email', models.CharField(max_length=45, null=True, unique=True)),
            ],
            options={
                'db_table': 'student',
            },
        ),
        migrations.CreateModel(
            name='Webcourseinfo',
            fields=[
                ('w_course_id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=1000)),
                ('subtite', models.CharField(blank=True, max_length=5000, null=True)),
                ('link', models.CharField(blank=True, max_length=100, null=True)),
                ('access', models.IntegerField(blank=True, null=True)),
                ('duration', models.IntegerField(blank=True, null=True)),
                ('original_price', models.FloatField(blank=True, null=True)),
                ('offer_price', models.FloatField(blank=True, null=True)),
                ('no_modules', models.IntegerField(blank=True, null=True)),
                ('no_quizzes', models.IntegerField(blank=True, null=True)),
                ('rating', models.FloatField(blank=True, null=True)),
                ('regular_specialization', models.IntegerField(blank=True, null=True)),
                ('manipulated_or_not', models.IntegerField(blank=True, null=True)),
                ('overview', models.TextField(blank=True, null=True)),
                ('method_assesment', models.TextField(blank=True, null=True)),
                ('prerequisite', models.TextField(blank=True, null=True)),
                ('career_path', models.TextField(blank=True, null=True)),
                ('learning_outcomes', models.TextField(blank=True, null=True)),
                ('quality', models.CharField(blank=True, max_length=45, null=True)),
                ('quaity_type', models.CharField(blank=True, max_length=1, null=True)),
                ('certification', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kurstrack.certification')),
            ],
            options={
                'db_table': 'webcourseinfo',
            },
        ),
        migrations.CreateModel(
            name='WhoCourseFor',
            fields=[
                ('who_course_id', models.IntegerField(primary_key=True, serialize=False)),
                ('who_course_for', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'who_course_for',
            },
        ),
        migrations.CreateModel(
            name='WhyChoose',
            fields=[
                ('whychoose_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'why_choose',
            },
        ),
        migrations.CreateModel(
            name='Webdailysale',
            fields=[
                ('date', models.DateField(primary_key=True, serialize=False)),
                ('course_id', models.IntegerField(blank=True, null=True)),
                ('order_id', models.IntegerField(blank=True, null=True)),
                ('unit_sold', models.IntegerField(blank=True, null=True)),
                ('revenue', models.FloatField(blank=True, null=True)),
                ('sold_course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kurstrack.webcourseinfo')),
                ('stu', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kurstrack.student')),
            ],
            options={
                'db_table': 'webdailysale',
            },
        ),
        migrations.CreateModel(
            name='WebcoursesinfoHasQuizzes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kurstrack.webcourseinfo')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kurstrack.quizes')),
            ],
            options={
                'db_table': 'webcoursesinfo_has_quizzes',
            },
        ),
        migrations.AddField(
            model_name='webcourseinfo',
            name='who_course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kurstrack.whocoursefor'),
        ),
        migrations.AddField(
            model_name='webcourseinfo',
            name='whychoose',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kurstrack.whychoose'),
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('unit_id', models.IntegerField(primary_key=True, serialize=False)),
                ('unit_name', models.CharField(max_length=100)),
                ('module', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='kurstrack.module')),
            ],
            options={
                'db_table': 'unit',
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('review_id', models.AutoField(primary_key=True, serialize=False)),
                ('review_text', models.TextField(blank=True, null=True)),
                ('rating', models.FloatField(blank=True, null=True)),
                ('reviewed_course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kurstrack.webcourseinfo')),
                ('st', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kurstrack.student')),
            ],
            options={
                'db_table': 'review',
            },
        ),
        migrations.CreateModel(
            name='Reeddailysale',
            fields=[
                ('date', models.DateField(primary_key=True, serialize=False)),
                ('order_id', models.IntegerField(blank=True, null=True)),
                ('course_id', models.IntegerField(blank=True, null=True)),
                ('unit_sold', models.IntegerField(blank=True, null=True)),
                ('revenue', models.FloatField(blank=True, null=True)),
                ('r_course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kurstrack.reedcoursesinfo')),
                ('st', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kurstrack.student')),
            ],
            options={
                'db_table': 'reeddailysale',
            },
        ),
        migrations.AddField(
            model_name='reedcoursesinfo',
            name='w_course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kurstrack.webcourseinfo'),
        ),
        migrations.AddField(
            model_name='quizes',
            name='register',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kurstrack.registerinfo'),
        ),
        migrations.AddField(
            model_name='module',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kurstrack.quizes'),
        ),
        migrations.CreateModel(
            name='Log',
            fields=[
                ('log_id', models.IntegerField(primary_key=True, serialize=False)),
                ('log_table', models.CharField(blank=True, max_length=45, null=True)),
                ('field', models.CharField(blank=True, max_length=45, null=True)),
                ('field_id', models.IntegerField(blank=True, null=True)),
                ('change_reason', models.CharField(blank=True, max_length=45, null=True)),
                ('old_value', models.CharField(blank=True, max_length=200, null=True)),
                ('add_date', models.DateTimeField(blank=True, null=True)),
                ('add_by', models.CharField(blank=True, max_length=45, null=True)),
                ('log_register', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kurstrack.registerinfo')),
            ],
            options={
                'db_table': 'log',
            },
        ),
        migrations.CreateModel(
            name='Groupondailysale',
            fields=[
                ('date', models.DateField(primary_key=True, serialize=False)),
                ('order_id', models.IntegerField(blank=True, null=True)),
                ('course_id', models.IntegerField(blank=True, null=True)),
                ('unit_sold', models.IntegerField(blank=True, null=True)),
                ('revenue', models.FloatField(blank=True, null=True)),
                ('g_course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kurstrack.grouponcoursesinfo')),
                ('stn', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kurstrack.student')),
            ],
            options={
                'db_table': 'groupondailysale',
            },
        ),
        migrations.AddField(
            model_name='grouponcoursesinfo',
            name='web_course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kurstrack.webcourseinfo'),
        ),
        migrations.CreateModel(
            name='Courseslevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='kurstrack.level')),
                ('w_course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kurstrack.webcourseinfo')),
            ],
            options={
                'db_table': 'courseslevel',
            },
        ),
        migrations.CreateModel(
            name='Courseorder',
            fields=[
                ('order_no', models.AutoField(primary_key=True, serialize=False)),
                ('details', models.TextField()),
                ('quantity', models.IntegerField()),
                ('total_price', models.FloatField()),
                ('shipping_method', models.CharField(max_length=50)),
                ('payment_method', models.CharField(max_length=50)),
                ('gift_or_not', models.IntegerField()),
                ('address', models.TextField(blank=True, null=True)),
                ('coupon_code', models.CharField(blank=True, max_length=10, null=True)),
                ('id', models.OneToOneField(db_column='id', on_delete=django.db.models.deletion.CASCADE, to='kurstrack.cart')),
                ('w_course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kurstrack.webcourseinfo')),
            ],
            options={
                'db_table': 'courseorder',
            },
        ),
        migrations.CreateModel(
            name='Coursemodule',
            fields=[
                ('module_type', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('module', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='kurstrack.module')),
                ('register', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kurstrack.registerinfo')),
                ('w_course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kurstrack.webcourseinfo')),
            ],
            options={
                'db_table': 'coursemodule',
            },
        ),
        migrations.CreateModel(
            name='Coursedesignhaswebcoursesinfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kurstrack.webcourseinfo')),
                ('w_design', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kurstrack.coursedesign')),
            ],
            options={
                'db_table': 'coursedesignhaswebcoursesinfo',
            },
        ),
        migrations.CreateModel(
            name='Coursecategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cat', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='kurstrack.category')),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='kurstrack.webcourseinfo')),
            ],
            options={
                'db_table': 'coursecategory',
            },
        ),
        migrations.AddField(
            model_name='cart',
            name='stud_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kurstrack.student'),
        ),
    ]
